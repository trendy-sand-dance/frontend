<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Club Pong - Game</title>
  <link href="output.css" rel="stylesheet">
  <script src="https://unpkg.com/htmx.org@2.0.4"
    integrity="sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+"
    crossorigin="anonymous"></script>
  <script src="https://kit.fontawesome.com/3f6a90a5aa.js" crossorigin="anonymous"></script>
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link href="https://fonts.googleapis.com/css2?family=Silkscreen:wght@400;700&display=swap" rel="stylesheet">


</head>

<body class="bg-[--color-background]" hx-ext="events">

  <script>

    if (!window.globalsInitialized) { 
      window.globalsInitialized = true;

      const username = "<%=user%>"
      const id = "<%=id%>";
      const gameserverURL = "<%=gameserverURL%>";

      window.__INITIAL_STATE__ = "<%=user%>";
      window.__USER_ID__ = "<%=id%>";
      window.__GAMESERVER_URL__ = "<%=gameserverURL%>";
      window.__IS_GOOGLE_USER__ = "<%=google_user%>";
		console.log("window.__IS_GOOGLE_USER__:  ", window.__IS_GOOGLE_USER__)
      console.table(window.__INITIAL_STATE__);
      console.table(window.__GAMESERVER_URL__);
      console.log("username : ", username)
      console.log("id : ", id)
    } 
    else {

      console.log("user after pagination: ", window.__INITIAL_STATE__);
      console.log("id after pagination: ", window.__USER_ID__);

    }

  </script>

	<div class="relative w-screen h-screen overflow-hidden bg-[--color-background]">

		<!-- Game Canvas -->
		<div class="absolute inset-0 z-0">
			<div class="w-full h-full" hx-get="/game-canvas" hx-trigger="load" hx-swap="outerHTML">
			<!-- Canvas loads here -->
			</div>
		</div>
	
		<!-- Sidebar -->
		<aside 
			id="sidebar"
			class="hidden absolute top-0 right-0 w-1/6 h-[calc(100vh-64px)] flex-col bg-[--color-background] border-x z-10 animate-slide-in">
			<!-- Dynamic sidebar content -->
		<div id="sidebar-content" class="flex flex-col overflow-x-hidden p-4 justify-between h-full">

			    <!-- Dynamic sidebar content -->
          <div id="sidebar-content-replaceable" class="overflow-y-auto p-4"></div>
          
          <!-- Chat Text box -->
          <div id="sidebar-content-chat" class="flex justify-center flex-col h-1/6 p-4 hidden">
            <div class="border border-[--color-secondary] rounded-md p-2">
              <input id="text-input-chat" type="text" placeholder="Type here..." class="bg-[--color-background] text-[--color-text] w-full outline-none">
              <div class="flex flex-row justify-between">
                <button id="send-button-chat" type="">=></button>
              </div>
            </div>
          </div>

		</div>

		</aside>
	
		<!-- Bottom Navbar -->
		<nav class="absolute bottom-0 left-0 right-0 text-[--color-text] bg-[--color-background] bg-opacity-50 flex items-center p-4 space-x-4 border-t border-[--color-secondary] z-20">
	
		<div id="dashboard-profile-button"
			hx-get="/dashboard/<%= id %>"
			hx-trigger="load"
			hx-swap="innerHTML"
			hx-target="this">
      
		</div>
	
		<button 
      id="chat-content-btn"
      type="button"
			hx-get="/sidebar/chat/<%= id %>"
      hx-trigger='click, popstate-triggered'
			hx-targetsidebar-content-replaceable"
			hx-swap="innerHTML"
			hx-target="#sidebar-content-replaceable"
			onclick="toggleSidebar(1)"
			class="rounded-md p-2 justify-right bg-[--color-secondary] hover:bg-[--color-accent]">
			Chat ðŸ’¬ðŸ’¬ðŸ’¬
		</button>
	
		<button 
      id="friend-content-btn"
			type="button"
      hx-trigger='click, popstate-triggered'
			hx-get="/viewPlayers/<%= user %>"
			hx-target="#sidebar-content-replaceable"
			hx-swap="innerHTML"
			onclick="toggleSidebar(2)"
			class="rounded-md p-2 justify-right bg-[--color-secondary] hover:bg-[--color-accent]">
			Friendos ðŸ‘¬ðŸ‘«ðŸ‘­
		</button>

		<button 
      id="match-content-btn"
			type="button"
      hx-trigger='click, popstate-triggered'
			hx-get="/viewMatchHistory/<%= id %>"
			hx-target="#sidebar-content-replaceable"
			hx-swap="innerHTML"
			onclick="toggleSidebar(3)"
			class="rounded-md p-2 justify-right bg-[--color-secondary] hover:bg-[--color-accent]">
			match history ðŸŽ®ðŸ“œ
		</button>
	
		</nav>
	
		</div>

</body>



<script>
  if (!window.sidebarScriptLoaded) {

    window.sidebarScriptLoaded = true;
    let prevcontent = 0;
    let contentMap = {1: "chat-content-btn", 2: "friend-content-btn", 3: "match-content-btn"};

    function hideElement(element, newcontent) {

      if (newcontent == 1) {
        element.style.display = "block"
      }
      else {
        element.style.display = "none";
      }

    }

    function openSidebar(sidebarElement) { 

      sidebarElement.classList.remove('hidden', 'animate-slide-out');
      sidebarElement.classList.add('animate-slide-in');

    }

    function closeSidebar(sidebarElement) { 

      sidebarElement.classList.remove('animate-slide-in');
      sidebarElement.classList.add('animate-slide-out');

      // Wait for animation to complete before hiding
      setTimeout(() => {
        sidebarElement.classList.add('hidden');
        sidebarElement.classList.remove('animate-slide-out');
      }, 300); // Match your animation duration


    }

    function toggleSidebar(newcontent) {

      const sidebar = document.getElementById('sidebar');
      if (!sidebar) return;

      const chatInput = document.getElementById('sidebar-content-chat');
      hideElement(chatInput, newcontent);

      const isHidden = sidebar.classList.contains('hidden');
      const isSameContent = prevcontent === newcontent;

      if (isHidden || !isSameContent) {
        openSidebar(sidebar);
        prevcontent = newcontent;
        history.pushState({ sidebarVisible: true, content: newcontent }, '');
        console.log("Opening: pushing new state");
        console.log(history);
      } 
      else {
        closeSidebar(sidebar, newcontent);
        history.pushState({ sidebarVisible: false, content: newcontent }, '');
        console.log("Closing: pushing new state");
        console.log(history);
      }

    }

    // Listen to browser navigation (back/forward)
    window.addEventListener('popstate', (event) => {

      const sidebar = document.getElementById('sidebar');
      if (!sidebar) return;

      const state = event.state;
      console.log("state: ", event.state);
      console.log("history: ", history);

      if (state) {

        prevcontent = state.content;

        if (state.sidebarVisible) {
          openSidebar(sidebar);
        } 
        else {
          closeSidebar(sidebar);
        }


        const dynamicElement = document.getElementById(contentMap[state.content]);
        if (dynamicElement) { 
          dynamicElement.dispatchEvent(new Event('popstate-triggered'));
        }

      }

    });

  }
</script>

</html>
